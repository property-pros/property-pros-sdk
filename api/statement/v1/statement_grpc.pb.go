// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package statement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatementServiceClient is the client API for StatementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatementServiceClient interface {
	GetStatements(ctx context.Context, in *GetStatementsRequest, opts ...grpc.CallOption) (*GetStatementsResponse, error)
	GetStatementDoc(ctx context.Context, in *GetStatementDocRequest, opts ...grpc.CallOption) (*GetStatementDocResponse, error)
}

type statementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatementServiceClient(cc grpc.ClientConnInterface) StatementServiceClient {
	return &statementServiceClient{cc}
}

func (c *statementServiceClient) GetStatements(ctx context.Context, in *GetStatementsRequest, opts ...grpc.CallOption) (*GetStatementsResponse, error) {
	out := new(GetStatementsResponse)
	err := c.cc.Invoke(ctx, "/api.statement.v1.StatementService/GetStatements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statementServiceClient) GetStatementDoc(ctx context.Context, in *GetStatementDocRequest, opts ...grpc.CallOption) (*GetStatementDocResponse, error) {
	out := new(GetStatementDocResponse)
	err := c.cc.Invoke(ctx, "/api.statement.v1.StatementService/GetStatementDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatementServiceServer is the server API for StatementService service.
// All implementations must embed UnimplementedStatementServiceServer
// for forward compatibility
type StatementServiceServer interface {
	GetStatements(context.Context, *GetStatementsRequest) (*GetStatementsResponse, error)
	GetStatementDoc(context.Context, *GetStatementDocRequest) (*GetStatementDocResponse, error)
	mustEmbedUnimplementedStatementServiceServer()
}

// UnimplementedStatementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatementServiceServer struct {
}

func (UnimplementedStatementServiceServer) GetStatements(context.Context, *GetStatementsRequest) (*GetStatementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatements not implemented")
}
func (UnimplementedStatementServiceServer) GetStatementDoc(context.Context, *GetStatementDocRequest) (*GetStatementDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatementDoc not implemented")
}
func (UnimplementedStatementServiceServer) mustEmbedUnimplementedStatementServiceServer() {}

// UnsafeStatementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatementServiceServer will
// result in compilation errors.
type UnsafeStatementServiceServer interface {
	mustEmbedUnimplementedStatementServiceServer()
}

func RegisterStatementServiceServer(s grpc.ServiceRegistrar, srv StatementServiceServer) {
	s.RegisterService(&StatementService_ServiceDesc, srv)
}

func _StatementService_GetStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementServiceServer).GetStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.statement.v1.StatementService/GetStatements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementServiceServer).GetStatements(ctx, req.(*GetStatementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatementService_GetStatementDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatementDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementServiceServer).GetStatementDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.statement.v1.StatementService/GetStatementDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementServiceServer).GetStatementDoc(ctx, req.(*GetStatementDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatementService_ServiceDesc is the grpc.ServiceDesc for StatementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.statement.v1.StatementService",
	HandlerType: (*StatementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatements",
			Handler:    _StatementService_GetStatements_Handler,
		},
		{
			MethodName: "GetStatementDoc",
			Handler:    _StatementService_GetStatementDoc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/statement/v1/statement.proto",
}
